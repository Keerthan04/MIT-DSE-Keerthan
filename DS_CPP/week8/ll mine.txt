//220968002
//Keerthan Kumar C
//implementation of linked list
#include<iostream>
using namespace std;
struct node
{
        int data;
        struct node* link;
}
struct node* root=NULL;
void append()
{
        struct node* newnode=new struct node;
        cout<<"Please enter the data to add";
        cin>>newnode->data;
        if(root==NULL)
        {
                root=newnode->link;
        }
        else
        {
                struct node* p=root;;
                while(p->link!=NULL)
                {
                        p=p->link;
                }
                p=newnode;
        }
}
void appendbefore()
{
        int ele,flag=0,pos=0;;
        cout<<"Please enter the element before which we need to add the element";
        cin>>ele;
        struct node* p=root;
        while(p->link!=NULL)
        {
                pos++;
                if(p->data==ele)
                        flag=1;break;
                                                              p=p->link;
        }
        if(flag==1)
        {       struct node* newnode=new struct node;
                cout<<"Please enter the data to add";
                cin>>newnode->data;
                newnode->link=p;
                struct node* k=root;
                for(int i=0;i<pos-1;i++)
                {
                        k=k->link;
                }
                k=newnode;
        }
        else
                cout<<"No such element in list";
}

void appendafter()
{
        int ele,flag=0,pos=0;
        cout<<"Please enter the element after which we need to add the element";
        cin>>ele;
        struct node* p=root;
        while(p->link!=NULL)
        {
                pos++;
                if(p->data==ele)
                        flag=1;break;
                p=p->link;
        }
        if(flag==1)
        {       struct node* newnode=new struct node;
                cout<<"Please enter the data to add";
                cin>>newnode->data;
                struct node* a;
                a=p->link;
                p->link=newnode;
                newnode->link=a;
                        }
        else
                cout<<"No such element in list";
}
void deleteele()
{
        int ele,flag=0,pos=0;
        cout<<"Please enter the element to delete";
        cin>>ele;
        struct node*p=root;
        while(p-link!=NULL)
        {
                pos++;
                if(p->data==ele)
                        flag=1;break;
                p=p->link;
        }
        if(flag==1)
        {
                struct node* a;
                a=p->link;
                newnode->link=a;
                struct node* k=root
                for(int i=0;i<pos-1;i++)
                {
                        k=k->link;
                }
                k=a;
        }
        else
                cout<<"No such element";
}
void display()
{
        struct node* p=root;
        while(p->link!=NULL)
        {
                cout<<p->data<<" ";
        }
}int main()
{
        int ch;
        do{
                cout<<"Please enter your choice"<<endl;
                cout<<"1.insert at beginning"<<endl;
                cout<<"2.insert at end"<<endl;
                cout<<"3.Insert after"<<endl;
                cout<<"4.insert before"<<endl;
                cout<<"5.delete"endl;
                cout<<"6.print"<<endl;
                cout<<"7.exit"<<endl;
                cin>>ch;
                switch(ch)
                {
                        case 1:
                                append();
                                break;
                        case 2:
                                append();break;
                        case 3:
                                appendafter();break;
                        case 4:
                                appendbefore();break;
                        case 5:
                                deleteele();break;
                        case 6:
                                display();break;
                        case 7:
                                exit(1);
                }
        }while(ch!=7);
}